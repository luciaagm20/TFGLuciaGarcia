# Generated by Django 4.2.8 on 2024-07-11 12:41

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('weight', models.IntegerField()),
                ('age', models.IntegerField()),
                ('height', models.IntegerField()),
                ('gender', models.CharField(choices=[('Female', 'Female'), ('Male', 'Male')], default='Female', max_length=20)),
                ('activity', models.CharField(choices=[('Sedentary', 'Sedentary'), ('Light activity', 'Light activity'), ('Moderate activity', 'Moderate activity'), ('Daily exercise', 'Daily exercise'), ('Intense exercise', 'Intense exercise')], default='Sedentary', max_length=20)),
                ('goal', models.CharField(choices=[('Maintenance', 'Maintenance'), ('Muscle gain', 'Muscle gain'), ('Fat loss', 'Fat loss')], default='Maintenance', max_length=20)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Allergies',
            fields=[
                ('allergy_type', models.CharField(choices=[('None', 'None'), ('Celiac disease', 'Celiac disease'), ('Lactose intolerant', 'Lactose intolerant'), ('Seafood', 'Seafood'), ('Egg allergy', 'Egg allergy')], default='None', max_length=50, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='DayOfWeek',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Food',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_code', models.IntegerField(null=True)),
                ('subgroup_code', models.IntegerField(null=True)),
                ('group_name', models.TextField(null=True)),
                ('subgroup_name', models.TextField(null=True)),
                ('food_name', models.TextField(null=True)),
                ('water', models.FloatField(null=True)),
                ('protein', models.FloatField(null=True)),
                ('carbohydrates', models.FloatField(null=True)),
                ('fats', models.FloatField(null=True)),
                ('sugars', models.FloatField(null=True)),
                ('glucose', models.FloatField(null=True)),
                ('lactose', models.FloatField(null=True)),
                ('has_lactose', models.BooleanField(default=False)),
                ('has_seafood', models.BooleanField(default=False)),
                ('has_egg', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='FoodJoin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('food_code_one', models.IntegerField()),
                ('food_code_two', models.IntegerField()),
                ('group_code_one', models.IntegerField()),
                ('group_code_two', models.IntegerField()),
                ('has_lactose', models.BooleanField()),
                ('has_seafood', models.BooleanField()),
                ('has_egg', models.BooleanField()),
                ('calories', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='Gender',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Goal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Meal',
            fields=[
                ('name_meal', models.CharField(choices=[('Breakfast', 'Breakfast'), ('Lunch', 'Lunch'), ('Snack', 'Snack'), ('Dinner', 'Dinner')], max_length=50, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='WeeklyMenu',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Requests',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='text', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='FoodIntake',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('calories', models.IntegerField()),
                ('day_of_week', models.CharField(choices=[('Monday', 'Monday'), ('Tuesday', 'Tuesday'), ('Wednesday', 'Wednesday'), ('Thursday', 'Thursday'), ('Friday', 'Friday'), ('Saturday', 'Saturday'), ('Sunday', 'Sunday')], max_length=10)),
                ('meal', models.CharField(choices=[('Breakfast', 'Breakfast'), ('Lunch', 'Lunch'), ('Snack', 'Snack'), ('Dinner', 'Dinner')], max_length=10)),
                ('food', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='backend.food')),
                ('weeklyMenu', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.weeklymenu')),
            ],
        ),
        migrations.AddField(
            model_name='client',
            name='allergies',
            field=models.ManyToManyField(blank=True, to='backend.allergies'),
        ),
        migrations.AddField(
            model_name='client',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='backend_users_groups', related_query_name='backend_user_group', to='auth.group'),
        ),
        migrations.AddField(
            model_name='client',
            name='meals',
            field=models.ManyToManyField(blank=True, to='backend.meal'),
        ),
        migrations.AddField(
            model_name='client',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='backend_users_permissions', related_query_name='backend_user_permission', to='auth.permission'),
        ),
    ]
